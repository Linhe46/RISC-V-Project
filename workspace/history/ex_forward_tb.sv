
`include "defines.sv"
module ex_tb(
    input   logic       clk,
    input   logic       rst,
    //input   logic[5:0]  stall,    generated by stall unit
    input   logic[31:0] pc,
    input   logic[31:0] inst,

    /* EX/MEM output interface */
    // memory address & data
    output[`REG_DATA_WIDTH-1:0]     alu_res_mem,    // address
    output[`REG_DATA_WIDTH-1:0]     bypass_op2_mem, // data
    // control bits
    output  logic                       mem_read_mem,
    output  logic                       mem_write_mem,
    output  logic[`MASK_WIDTH-1:0]      mask_mem,
    output  logic                       unsigned_load_mem,
    output  logic                       reg_write_mem,
    output  logic                       mem_to_reg_mem
);
    
    /* id stage output signals */
    logic       rs1_rd_en_id;
    logic       rs2_rd_en_id;
    logic[4:0]  rs1_addr_id;
    logic[4:0]  rs2_addr_id;
    logic[4:0]  rd_addr_id;
    /* id stage register input, from registers */
    logic[31:0] rs1_data_reg;
    logic[31:0] rs2_data_reg;
    registers regfile_u(
        // input
        clk, rst, 1'b0, 
        rs2_rd_en_id, rs1_rd_en_id, rs2_addr_id, rs1_addr_id, rd_addr_id, `REG_ADDR_ZERO,
        // output
        rs2_data_reg, rs1_data_reg
    );
    logic[`STALL_WIDTH-1:0] stall;
    logic[31:0] imm_id;
    /* branch judge output */
    logic      branch_taken;
    logic[31:0]branch_addr;
    //output    logic[31:0]    link_addr,
    logic[3:0] alu_op_id;
    logic      alu_src_id;
    // MEM stage
    logic       mem_read_id;            // load
    logic       mem_write_id;            // store
    logic[1:0]  mask_id;                // load/store mask
    logic       unsigned_load_id;        // if unsigned-load or not
    // WB stage
    logic       reg_write_id;
    logic       mem_to_reg_id;   

    id id_u(
        // inputs
        rst, stall, pc, inst, rs1_data_reg, rs2_data_reg,
        rs1_rd_en_id, rs2_rd_en_id, rs1_addr_id, rs2_addr_id, rd_addr_id, imm_id,
        branch_taken, branch_addr, /*link_addr,*/ 
        alu_op_id, alu_src_id,
        mem_read_id, mem_write_id, mask_id, unsigned_load_id,
        reg_write_id, mem_to_reg_id
    );

    // ex stage inputs
    logic[`REG_DATA_WIDTH-1:0]  rs1_data_ex;
    logic[`REG_DATA_WIDTH-1:0]  rs2_data_ex;
    logic[`REG_DATA_WIDTH-1:0]  imm_ex;
    logic                       rs1_rd_en_ex;
    logic                       rs2_rd_en_ex;
    logic[`REG_ADDR_WIDTH-1:0]  rs1_addr_ex;
    logic[`REG_ADDR_WIDTH-1:0]  rs2_addr_ex;
    logic[`REG_ADDR_WIDTH-1:0]  rd_addr_ex;
    /* pipeline regfile control bits */
    // EX stage
    logic[`ALU_OP_WIDTH-1:0]    alu_op_ex;
    logic                       alu_src_ex;
    // MEM stage
    logic                   mem_read_ex;
    logic                   mem_write_ex;
    logic[`MASK_WIDTH-1:0]  mask_ex;
    logic                   unsigned_load_ex;
    // WB stage
    logic       reg_write_ex;
    logic       mem_to_reg_ex;

    id_ex_reg id_ex_reg_u(
        // global control
        clk, rst, stall,
        // register inputs
        rs1_data_reg, rs2_data_reg,
        // id stage inputs
        imm_id, rs1_rd_en_id, rs2_rd_en_id, rs1_addr_id, rs2_addr_id, rd_addr_id,
        alu_op_id, alu_src_id,
        mem_read_id, mem_write_id, mask_id, unsigned_load_id,
        reg_write_id, mem_to_reg_id,
        // ex stage inputs
        rs1_data_ex, rs2_data_ex,
        imm_ex, rs1_rd_en_ex, rs2_rd_en_ex, rs1_addr_ex, rs2_addr_ex, rd_addr_ex,
        alu_op_ex, alu_src_ex,
        // bypass mem, wb control signals
        mem_read_ex, mem_write_ex, mask_ex, unsigned_load_ex,
        reg_write_ex, mem_to_reg_ex
    );

    logic[`REG_DATA_WIDTH-1:0]  alu_res_ex;
    logic[`REG_DATA_WIDTH-1:0]  bypass_op2_ex;
    logic[`FORWARD_WIDTH-1:0]   forward_op1;
    logic[`FORWARD_WIDTH-1:0]   forward_op2;
    logic[`REG_DATA_WIDTH-1:0]  forward_data_mem;
    logic[`REG_DATA_WIDTH-1:0]  forward_data_wb;

    ex ex_u(
        rst,
        rs1_data_ex, rs2_data_ex, imm_ex, 
        forward_op1, forward_op2,
        forward_data_mem, forward_data_wb,
        alu_op_ex, alu_src_ex,
        alu_res_ex, bypass_op2_ex
    );

    ex_mem_reg ex_mem_reg_u(
        clk, rst,
        // ex stage inputs
        alu_res_ex, bypass_op2_ex,
        // bypass control signals
        mem_read_ex, mem_write_ex, mask_ex, unsigned_load_ex,
        reg_write_ex, mem_to_reg_ex,
        // mem stage inputs
        alu_res_mem, bypass_op2_mem,
        mem_read_mem, mem_write_mem, mask_mem, unsigned_load_mem,
        // bypass wb control signals
        reg_write_mem, mem_to_reg_mem
    );

    stall_unit stall_u(
        rst, 
        rs1_rd_en_id, rs2_rd_en_id, rs1_addr_id, rs2_addr_id, mem_read_ex, 
        stall
    );
    
    forward_unit forward_u(
        rst,
        rs1_rd_en_ex, rs2_rd_en_ex, rs1_addr_ex, rs2_addr_ex, rd_addr_ex,
        rd_addr_mem, reg_write_mem,
        rd_addr_wb, reg_write_wb,
        forward_op1, forward_op2
    );

endmodule